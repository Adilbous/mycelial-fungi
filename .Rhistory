linear_FNN %>% compile(
optimizer = "rmsprop",
loss = "mse",
metrics = c("mae")
)
linear_results <- linear_FNN %>% evaluate(x_test, y_test)
#linear_prediction <- linear_FNN  %>% predict(x_val)
#linear_prediction
#y_test
linear_results
linear_prediction <- linear_FNN  %>% predict(x_test)
linear_prediction
#y_test
linear_history <- linear_FNN %>% fit(
x_train,
y_train,
epochs = 20,
batch_size = 32,
validation_data = list(x_val, y_val))
linear_results <- linear_FNN %>% evaluate(x_test, y_test)
#linear_prediction <- linear_FNN  %>% predict(x_val)
#linear_prediction
#y_test
linear_results
linear_prediction <- linear_FNN  %>% predict(x_test)
linear_prediction
#y_test
summary(linear_prediction)
plot(linear_history)
rm(list=ls())
library(keras)
library(readr)
library(dplyr)
setwd("/Users/adil/Desktop/OBT/Projet option/Script")
Data_Geno<- read.csv(file = "Poplar.Geno.csv", header = FALSE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
Data_Extract <- as.matrix(Data_Geno[,-1][-1,], rownames.force = TRUE) #On retire également la première colonne et la première ligne qui ne contient pas de valeurs
conv_data = matrix(NA, nrow = dim(Data_Extract)[1], ncol = dim(Data_Extract)[2])
for (i in 1:dim(Data_Extract)[1]){
for (j in 1:dim(Data_Extract)[2]){
if (Data_Extract[i,j] == "A/A"){
conv_data[i,j] = 1
}else if (Data_Extract[i,j] == "A/C") {
conv_data[i,j] = 2
}else if (Data_Extract[i,j] == "A/G") {
conv_data[i,j] = 3
}else if (Data_Extract[i,j] == "A/T") {
conv_data[i,j] = 4
}else if (Data_Extract[i,j] == "C/A") {
conv_data[i,j] = 5
}else if (Data_Extract[i,j] == "C/C") {
conv_data[i,j] = 6
}else if (Data_Extract[i,j] == "C/G"){
conv_data[i,j] = 7
}else if (Data_Extract[i,j] == "C/T") {
conv_data[i,j] = 8
}else if (Data_Extract[i,j] == "G/A") {
conv_data[i,j] = 9
}else if (Data_Extract[i,j] == "G/C") {
conv_data[i,j] = 10
}else if (Data_Extract[i,j] == "G/G") {
conv_data[i,j] = 11
}else if (Data_Extract[i,j] == "G/T") {
conv_data[i,j] = 12
}else if (Data_Extract[i,j] == "T/A") {
conv_data[i,j] = 13
}else if (Data_Extract[i,j] == "T/C") {
conv_data[i,j] = 14
}else if (Data_Extract[i,j] == "T/G") {
conv_data[i,j] = 15
}else if (Data_Extract[i,j] == "T/T") {
conv_data[i,j] = 16
}
}
}
Data_Pheno <- read.csv(file = "Poplar.Pheno.csv", header = FALSE, sep = ",", quote = "\"",dec = ".", fill = TRUE, comment.char = "")
Data_Extract_Pheno <- as.matrix(Data_Pheno[-1,][,4], rownames.force = TRUE) #On selectionne la colonne BS.ORL et on enlève le premier terme "bs.orl"
conv_data_pheno = matrix(NA, nrow = dim(Data_Extract_Pheno)[1], ncol = dim(Data_Extract_Pheno)[2])
for (i in 1:dim(Data_Extract_Pheno)[1]){
for (j in 1:dim(Data_Extract_Pheno)[2]){
conv_data_pheno[i][j] = as.numeric(Data_Extract_Pheno[i][j])
}
}
# Standardisation des données
mean <- apply(conv_data_pheno, 2, mean)
std <- apply(conv_data_pheno, 2, sd)
conv_data_pheno <- scale(conv_data_pheno, center = mean, scale = std)
x_train = conv_data[1:352,1:7808]
y_train = conv_data_pheno[1:352]
x_val = conv_data[353:384,1:7808]
y_val = conv_data_pheno[353:384]
x_test = conv_data[385:562,1:7808]
y_test = conv_data_pheno[385:562]
binary_FNN <- keras_model_sequential() %>%
layer_dense(units = 8, activation = "relu", input_shape = c(7808)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
binary_FNN %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("mae")
)
binary_history <- binary_FNN %>% fit(
x_train,
y_train,
epochs = 10,
batch_size = 32,
validation_data = list(x_val, y_val)
)
plot(binary_history)
binary_results <- binary_FNN %>% evaluate(x_test, y_test)
binary_results
linear_FNN <- keras_model_sequential() %>%
layer_dense(units = 8, activation = "relu", input_shape = c(7808)) %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1)
linear_FNN %>% compile(
optimizer = "rmsprop",
loss = "mse",
metrics = c("mae")
)
linear_history <- linear_FNN %>% fit(
x_train,
y_train,
epochs = 10,
batch_size = 32,
validation_data = list(x_val, y_val))
plot(linear_history)
linear_results <- linear_FNN %>% evaluate(x_test, y_test)
linear_results
linear_prediction <- linear_FNN  %>% predict(x_test)
summary(linear_prediction)
#y_test
linear_prediction
summary(linear_prediction)
summary(linear_prediction)
summary(conv_data_pheno)
linear_prediction <- linear_FNN  %>% predict(x_test)
print("Prediction summary")
summary(linear_prediction)
print("Actual data summary")
summary(y_test)
#y_test
linear_prediction <- linear_FNN  %>% predict(x_test)
print("Prediction summary")
summary(linear_prediction)
print("------------------")
print("Actual data summary")
summary(y_test)
#y_test
linear_prediction
linear_prediction <- linear_FNN  %>% predict(x_test)
summary(linear_prediction)
summary(y_test)
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver v2.R")
U = solver()
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver v1.R")
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="p", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="p", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="p", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="p", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="p", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="p", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="p", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="p", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="p", col="blue")
plot(X, m[,1]+mp[,1], lwd=2, type="l", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="l", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="l", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="l", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="l", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="l", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="l", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="l", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="l", col="blue")
plot(X, p[,1], lwd=2, type="p", col="green",)
plot(X, p[,2], lwd=2, type="p", col="orange")
plot(X, p[,3], lwd=2, type="p", col="red")
plot(X, p[,4], lwd=2, type="p", col="blue")
plot(X, p[,5], lwd=2, type="p", col="blue")
plot(X, p[,6], lwd=2, type="p", col="blue")
plot(X, p[,7], lwd=2, type="p", col="blue")
plot(X, p[,8], lwd=2, type="p", col="blue")
plot(X, p[,9], lwd=2, type="p", col="blue")
plot(X, se[,1], lwd=2, type="p", col="green",)
plot(X, se[,2], lwd=2, type="p", col="orange")
plot(X, se[,3], lwd=2, type="p", col="red")
plot(X, se[,4], lwd=2, type="p", col="blue")
plot(X, se[,5], lwd=2, type="p", col="blue")
plot(X, se[,6], lwd=2, type="p", col="blue")
plot(X, se[,7], lwd=2, type="p", col="blue")
plot(X, se[,8], lwd=2, type="p", col="blue")
plot(X, se[,9], lwd=2, type="p", col="blue")
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="l", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="l", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="l", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="l", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="l", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="l", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="l", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="l", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="l", col="blue")
plot(X, se[,1], lwd=2, type="p", col="green",)
plot(X, se[,2], lwd=2, type="p", col="orange")
plot(X, se[,3], lwd=2, type="p", col="red")
plot(X, se[,4], lwd=2, type="p", col="blue")
plot(X, se[,5], lwd=2, type="p", col="blue")
plot(X, se[,6], lwd=2, type="p", col="blue")
plot(X, se[,7], lwd=2, type="p", col="blue")
plot(X, se[,8], lwd=2, type="p", col="blue")
plot(X, se[,9], lwd=2, type="p", col="blue")
plot(X, p[,1], lwd=2, type="p", col="green",)
plot(X, p[,2], lwd=2, type="p", col="orange")
plot(X, p[,3], lwd=2, type="p", col="red")
plot(X, p[,4], lwd=2, type="p", col="blue")
plot(X, p[,5], lwd=2, type="p", col="blue")
plot(X, p[,6], lwd=2, type="p", col="blue")
plot(X, p[,7], lwd=2, type="p", col="blue")
plot(X, p[,8], lwd=2, type="p", col="blue")
plot(X, p[,9], lwd=2, type="p", col="blue")
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="l", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="l", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="l", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="l", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="l", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="l", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="l", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="l", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="l", col="blue")
plot(X, m[,1]+mp[,1], lwd=2, type="l", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="l", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="l", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="l", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="l", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="l", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="l", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="l", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="l", col="blue")
plot(X, se[,1], lwd=2, type="p", col="green",)
plot(X, se[,2], lwd=2, type="p", col="orange")
plot(X, se[,3], lwd=2, type="p", col="red")
plot(X, se[,4], lwd=2, type="p", col="blue")
plot(X, se[,5], lwd=2, type="p", col="blue")
plot(X, se[,6], lwd=2, type="p", col="blue")
plot(X, se[,7], lwd=2, type="p", col="blue")
plot(X, se[,8], lwd=2, type="p", col="blue")
plot(X, se[,9], lwd=2, type="p", col="blue")
U = init_U()
U
fs(U)
fns(U)
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="p", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="p", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="p", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="p", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="p", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="p", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="p", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="p", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="p", col="blue")
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="p", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="p", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="p", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="p", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="p", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="p", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="p", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="p", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="p", col="blue")
NT
Ttot%%tau
Ttot
tau
NS
Ttot%%tau
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,1]+mp[,1], lwd=2, type="p", col="green",)
plot(X, m[,2]+mp[,2], lwd=2, type="p", col="orange")
plot(X, m[,3]+mp[,3], lwd=2, type="p", col="red")
plot(X, m[,4]+mp[,4], lwd=2, type="p", col="blue")
plot(X, m[,5]+mp[,5], lwd=2, type="p", col="blue")
plot(X, m[,6]+mp[,6], lwd=2, type="p", col="blue")
plot(X, m[,7]+mp[,7], lwd=2, type="p", col="blue")
plot(X, m[,8]+mp[,8], lwd=2, type="p", col="blue")
plot(X, m[,9]+mp[,9], lwd=2, type="p", col="blue")
plot(X, m[,1500]+mp[,1500], lwd=2, type="p", col="green")
m
plot(X, m[,1]+mp[,1], lwd=2, type="p", col="green")
plot(X, m[,500]+mp[,500], lwd=2, type="p", col="orange")
plot(X, m[,1000]+mp[,1000], lwd=2, type="p", col="red")
plot(X, m[,1500]+mp[,1500], lwd=2, type="p", col="blue")
plot(X, m[,2000]+mp[,2000], lwd=2, type="p", col="blue")
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
#setwd(getwd())
#source("solver v1.R")
source("/Users/adil/Desktop/OBT/Projet 25 Scripts/solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
setwd(getwd())
#source("solver v1.R")
source("solver.R")
getwd()
getwd(getwd())
setwd("/Users/adil/Documents/GitHub/mycelial-fungi")
#source("solver v1.R")
source("solver.R")
?points
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
setwd("/Users/adil/Documents/GitHub/mycelial-fungi")
source("solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
points(X, m[,1]+mp[,1], lwd=2, type="p", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="p", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="p", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="p", col="blue")
points(X, m[,4000]+mp[,4000], lwd=2, type="p", col="blue")
plot(X, m[,5000]+mp[,5000], lwd=2, type="p", col="blue")
plot(X, m[,5000]+mp[,5000], lwd=2, type="p", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="p", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="p", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="p", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="p", col="blue")
points(X, m[,4000]+mp[,4000], lwd=2, type="p", col="blue")
plot(X, m[,5000]+mp[,5000], lwd=2, type="p", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="p", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="p", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="p", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="p", col="blue")
points(X, m[,4000]+mp[,4000], lwd=2, type="p", col="blue")
X = seq(0,L-h, by = h)
plot(X, m[,5000]+mp[,5000], lwd=2, type="p", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="p", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="p", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="p", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="p", col="blue")
points(X, m[,4000]+mp[,4000], lwd=2, type="p", col="blue")
plot(X, m[,5000]+mp[,5000], lwd=2, type="l", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="l", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="l", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="l", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="l", col="black")
points(X, m[,4000]+mp[,4000], lwd=2, type="l", col="yellow")
dim(m[,5000])
m[,5000]
mp[,5000]
rm(list=ls())
library(compiler)
library(deSolve)
library(pracma)
setwd("/Users/adil/Documents/GitHub/mycelial-fungi")
source("solver.R")
U = solver()
m = U[a1:b1,]
mp = U[a2:b2,]
p = U[a3:b3,]
si = U[a4:b4,]
se = U[a5:b5,]
X = seq(0,L-h, by = h)
plot(X, m[,5000]+mp[,5000], lwd=2, type="l", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="l", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="l", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="l", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="l", col="black")
points(X, m[,4000]+mp[,4000], lwd=2, type="l", col="yellow")
?plot
plot(X, m[,5000]+mp[,5000], ylab = "M + Mp", lwd=2, type="l", col="blue")
points(X, m[,1]+mp[,1], lwd=2, type="l", col="green")
points(X, m[,1000]+mp[,1000], lwd=2, type="l", col="orange")
points(X, m[,2000]+mp[,2000], lwd=2, type="l", col="red")
points(X, m[,3000]+mp[,3000], lwd=2, type="l", col="black")
points(X, m[,4000]+mp[,4000], lwd=2, type="l", col="yellow")
plot(X, p[,5000], ylab = "M + Mp", lwd=2, type="l", col="blue")
points(X, p[,1], lwd=2, type="l", col="green")
points(X, p[,1000], lwd=2, type="l", col="orange")
points(X, p[,2000], lwd=2, type="l", col="red")
points(X, p[,3000], lwd=2, type="l", col="black")
points(X, p[,4000], lwd=2, type="l", col="yellow")
plot(X, p[,1], ylab = "P", lwd=2, type="l", col="green")
points(X, p[,1000], lwd=2, type="l", col="orange")
points(X, p[,2000], lwd=2, type="l", col="red")
points(X, p[,3000], lwd=2, type="l", col="black")
points(X, p[,4000], lwd=2, type="l", col="yellow")
points(X, p[,5000], lwd=2, type="l", col="blue")
U0 = init_U()
U0
U0[,1]
sum(U0)
sum(U0[,1])
